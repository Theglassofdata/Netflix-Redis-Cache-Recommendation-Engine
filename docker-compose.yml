version: '3.8'

# Define reusable network for all services
networks:
  app-network:
    driver: bridge

# Define volumes for persistent data
volumes:
  redis-data:
   name: redis-data
  prometheus-data:
    name: prometheus-data
  grafana-data:
    name: grafana-data

services:
  # Spark Master Service
  spark-master:
    image: bitnami/spark:3.5.0
    container_name: spark-master
    hostname: spark-master
    ports:
      - "8082:8080"
      - "7077:7077"
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8080
      - SPARK_LOCAL_IP=spark-master
    volumes:
      - ./data:/data
      - ./data:/home/jovyan/data 
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep org.apache.spark.deploy.master.Master | grep -v grep || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Spark Worker Service
  spark-worker:
    image: bitnami/spark:3.5.0
    container_name: spark-worker
    hostname: spark-worker
    ports:
      - "8081:8081"
    volumes:
      - ./data:/data
      - ./data:/home/jovyan/data 
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_WEBUI_PORT=8081
      - SPARK_WORKER_PORT=7078
      - SPARK_LOCAL_IP=spark-worker
      - SPARK_WORKER_CORES=1
      - SPARK_WORKER_MEMORY=2g
    depends_on:
      spark-master:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep org.apache.spark.deploy.worker.Worker | grep -v grep || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 6G
        reservations:
          cpus: '1'
          memory: 3G
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    # Enable scaling by adjusting replicas in production
    # Example: docker-compose up --scale spark-worker=3

  # Redis Service
  redis:
    image: redis:7.0
    container_name: redis
    hostname: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    environment:
      - REDIS_PORT=6379
      - ALLOW_EMPTY_PASSWORD=yes # Consider secure auth in production
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus Service
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    hostname: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana Service
  grafana:
    image: grafana/grafana:10.0.3
    container_name: grafana
    hostname: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin # Change in production
      - GF_SERVER_HTTP_PORT=3000
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Flask API Service
  flask-api:
    build:
      context: ./flask-api
      dockerfile: Dockerfile
    container_name: flask-api
    hostname: flask-api
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SPARK_MASTER_URL=spark://spark-master:7077
    depends_on:
      redis:
        condition: service_healthy
      spark-master:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Metrics Server (Node Exporter for system metrics)
  metrics-server:
    image: prom/node-exporter:v1.6.1
    container_name: metrics-server
    hostname: metrics-server
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9100"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
 
  jupyter:
     image: jupyter/pyspark-notebook
     container_name: jupyter
     hostname: jupyter
     ports:
       - "8888:8888"
       - "8001:8001" # Optional: for Jupyter Notebook
     volumes:
       - ./data:/home/jovyan/data             # For your CSVs
       - ./notebooks:/home/jovyan/notebooks   # Jupyter .ipynb files
       - ./spark-ml:/home/jovyan/work         # Spark model scripts
     environment:
       - SPARK_MASTER=spark://spark-master:7077
     healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8888"]
        interval: 30s
        timeout: 10s
        retries: 3
        start_period: 30s
     networks:
       - app-network
     depends_on:
       spark-master:
         condition: service_healthy
